package org.alljoyn.triumph.util;

import java.io.IOException;
import java.io.Serializable;
import java.util.Date;

import org.alljoyn.triumph.model.components.EndPoint;
import org.alljoyn.triumph.view.EndPointTable.EndPointRow;

/**
 * A filter that handles endpoints
 * 
 * @author Michael Hotan, mhotan@quicinc.com
 */
public class EndPointFilter implements Filterable<EndPointRow>, Serializable {

    /**
     * Serialization ID generated by eclipse
     */
    private static final long serialVersionUID = -6451068863632193870L;

    private String mPrefix, mSuffix;
    private Short mPort;
    
    private String mSaveByName;
    
    /**
     * Creates a basic endpoint filter.
     * If any of the values are null then they are ignored upon filter
     * 
     * @param prefix name prefix to match
     * @param suffix name suffixe to match
     * @param port Port number to match
     */
    public EndPointFilter(String prefix, String suffix, Short port) {
        mPrefix = prefix == null ? "" : prefix;
        mSuffix = suffix == null ? "" : suffix;
        mPort = port;
        mSaveByName = "Filter_" + new Date().toString().replace(" ", "");
    }
    
    public void setPrefix(String prefix) {
        mPrefix = prefix;
    }
    
    public void setSuffix(String suffix) {
        mSuffix = suffix;
    }
    
    public void setPort(Short port) {
        mPort = port;
    }
    
    public String getPrefix() {
        return mPrefix;
    }
    
    public String getSuffix() {
        return mSuffix;
    }

    public Short getPort() {
        return mPort;
    }
    
    public void setSaveByName(String name) {
        if (name == null) return;
        mSaveByName = name;
    }
    
    public String getSaveByName() {
        return mSaveByName;
    }
    
    @Override
    public boolean filter(EndPointRow object) {
        String name = object.getName();
        boolean nameMatch = name.startsWith(mPrefix) && name.endsWith(mSuffix);
        if (mPort == null) return nameMatch;
        short port = SessionPortStorage.getPort(name);
        return (port == mPort.shortValue() && nameMatch);
    }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        if (!o.getClass().equals(getClass())) return false;
        EndPointFilter filter = (EndPointFilter) o;
        boolean nameEquals = mPrefix.equals(filter.mPrefix) && mSuffix.equals(filter.mSuffix);
        boolean portEquals = mPort == null && filter.mPort == null 
                || (mPort != null && mPort.equals(filter.mPort)) 
                || (filter.mPort != null && filter.mPort.equals(mPort));
        return nameEquals && portEquals;
    }
    
    @Override
    public int hashCode() {
        int code = mPrefix.hashCode() + 7 * mSuffix.hashCode();
        if (mPort == null)
            return code;
        code += 11 * mPort.hashCode();
        return code;
    }
    
    @Override
    public String toString() {
        return mSaveByName;
    }
    
    /**
     * As implemented regarding by interface Serializable.
     * This method requires this exact signature.
     * <br> This method is called from serialization to write out internal 
     * fields to a file storage.
     * 
     * @param out ObjectOutputStream to write the file out to.
     * @throws IOException Exception occured while writing a file.
     */
    private void writeObject(java.io.ObjectOutputStream out)
            throws IOException {
        out.writeUTF(mPrefix);
        out.writeUTF(mSuffix);
        if (mPort == null)
            out.writeShort(Short.MIN_VALUE);
        else 
            out.writeShort(mPort.shortValue());
        out.writeUTF(mSaveByName);
    }
    
    /**
     * As implemented regarding by interface Serializable.
     * This method requires this exact signature.
     * <br> This method is called when reading an object from file storage.
     * 
     * @param in Objectinput
     * @throws IOException
     * @throws ClassNotFoundException
     */
    private void readObject(java.io.ObjectInputStream in)
            throws IOException, ClassNotFoundException {
        mPrefix = in.readUTF();
        mSuffix = in.readUTF();
        short tmpVal = in.readShort();
        mPort = tmpVal == Short.MIN_VALUE ? null : tmpVal;
        mSaveByName = in.readUTF();
    }
    
}
